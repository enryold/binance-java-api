/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.enryold.binance.api;

import me.enryold.binance.api.exceptions.BinanceException;
import me.enryold.binance.api.generic.CommandTest;
import me.enryold.binance.api.impl.futures.commands.ChangeInitialLeverage;
import me.enryold.binance.api.impl.futures.endpoints.FuturesEndpoint;
import me.enryold.binance.api.utils.BinanceClientBuilder;
import org.junit.Assert;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertTrue;

public class ChangeInitialLeverageTest extends CommandTest {



    @Test
    public void testSuccess(){

        ChangeInitialLeverage changeInitialLeverage = new ChangeInitialLeverage()
                .withSymbol("BTCUSDT")
                .withLeverage(4);

        try {
            BinanceClient binanceClient = new BinanceClient(mockClient(responsePayload()), new FuturesEndpoint(), "fake", "fake");
            String response = binanceClient.submitCommand(changeInitialLeverage);

            Assert.assertEquals(response, responsePayload());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    @Test
    public void testMissingParam(){

        ChangeInitialLeverage changeInitialLeverage = new ChangeInitialLeverage()
                .withSymbol("BTCUSDT");

        try {
            BinanceClient binanceClient = new BinanceClient(mockError(), new FuturesEndpoint(), "fake", "fake");
            binanceClient.submitCommand(changeInitialLeverage);

            Assert.fail();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (BinanceException e){
            Assert.assertTrue(true);
            Assert.assertTrue(e.getMessage().contains("Cannot find required param"));
        }
    }


    @Test
    public void testFail(){

        ChangeInitialLeverage changeInitialLeverage = new ChangeInitialLeverage()
                .withSymbol("BTCUSDT")
                .withLeverage(4);

        try {
            BinanceClient binanceClient = new BinanceClient(mockError(), new FuturesEndpoint(), "fake", "fake");
            binanceClient.submitCommand(changeInitialLeverage);

            Assert.fail();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (BinanceException e){
            Assert.assertTrue(true);
        }
    }

    @Override
    public String responsePayload() {
        return "{\n" +
                "    \"leverage\": 21,\n" +
                "    \"maxNotionalValue\": \"1000000\",\n" +
                "    \"symbol\": \"BTCUSDT\"\n" +
                "}\n";
    }
}
